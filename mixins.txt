// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HHOOK;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HGLOBAL;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HLOCAL;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* GLOBALHANDLE;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* LOCALHANDLE;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HGDIOBJ;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HACCEL;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HBITMAP;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HBRUSH;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HCOLORSPACE;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HDC;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HGLRC;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HDESK;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HENHMETAFILE;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HFONT;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HICON;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HINSTANCE;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HKEY;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HMENU;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HMETAFILE;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HMODULE;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HMONITOR;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HPALETTE;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HPEN;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HRGN;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HRSRC;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HSTR;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HTASK;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HWND;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HWINSTA;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HKL;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HCURSOR;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HTERMINAL;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HWINEVENTHOOK;
// expansion at C:\LDC\bin\..\import\core\sys\windows\w32api.d(90,9)
alias STARTUPINFOW STARTUPINFO;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HDWP;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HDEVNOTIFY;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* SC_HANDLE;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* SERVICE_STATUS_HANDLE;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HCONVLIST;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HCONV;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HSZ;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HDDEDATA;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* I_RPC_HANDLE;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* RPC_AUTH_IDENTITY_HANDLE;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* RPC_AUTHZ_HANDLE;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* RPC_NS_HANDLE;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HCONTEXT;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HMETAFILEPICT;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HDROP;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* HPROPSHEETPAGE;
// expansion at C:\LDC\bin\..\import\core\sys\windows\basetsd.d(48,5)
alias void* DIGEST_HANDLE;
// expansion at C:\LDC\bin\..\import\std\functional.d(469,37)
a < b
// expansion at C:\LDC\bin\..\import\std\functional.d(472,32)
a < b
// expansion at C:\LDC\bin\..\import\std\functional.d(443,16)
cast(T)a < cast(T) b
// expansion at C:\LDC\bin\..\import\std\functional.d(469,37)
a < b
// expansion at C:\LDC\bin\..\import\std\functional.d(472,32)
a < b
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at C:\LDC\bin\..\import\std\bitmanip.d(740,9)
private uint _fraction_exponent_sign;@property uint fraction() @safe pure nothrow @nogc const { auto result = (_fraction_exponent_sign & 8388607U) >>0U; return cast(uint) result;}
@property void fraction(uint v) @safe pure nothrow @nogc { assert(v >= fraction_min, "Value is smaller than the minimum value of bitfield 'fraction'"); assert(v <= fraction_max, "Value is greater than the maximum value of bitfield 'fraction'"); _fraction_exponent_sign = cast(typeof(_fraction_exponent_sign)) ((_fraction_exponent_sign & (-1-cast(typeof(_fraction_exponent_sign))8388607U)) | ((cast(typeof(_fraction_exponent_sign)) v << 0U) & 8388607U));}
enum uint fraction_min = cast(uint)0U;  enum uint fraction_max = cast(uint)8388607U; @property ubyte exponent() @safe pure nothrow @nogc const { auto result = (_fraction_exponent_sign & 2139095040U) >>23U; return cast(ubyte) result;}
@property void exponent(ubyte v) @safe pure nothrow @nogc { assert(v >= exponent_min, "Value is smaller than the minimum value of bitfield 'exponent'"); assert(v <= exponent_max, "Value is greater than the maximum value of bitfield 'exponent'"); _fraction_exponent_sign = cast(typeof(_fraction_exponent_sign)) ((_fraction_exponent_sign & (-1-cast(typeof(_fraction_exponent_sign))2139095040U)) | ((cast(typeof(_fraction_exponent_sign)) v << 23U) & 2139095040U));}
enum ubyte exponent_min = cast(ubyte)0U;  enum ubyte exponent_max = cast(ubyte)255U; @property bool sign() @safe pure nothrow @nogc const { return (_fraction_exponent_sign & 2147483648U) != 0;}
@property void sign(bool v) @safe pure nothrow @nogc { if (v) _fraction_exponent_sign |= 2147483648U;else _fraction_exponent_sign &= cast(typeof(_fraction_exponent_sign))(-1-cast(typeof(_fraction_exponent_sign))2147483648U);}

// expansion at C:\LDC\bin\..\import\std\bitmanip.d(821,9)
private ulong _fraction_exponent_sign;@property ulong fraction() @safe pure nothrow @nogc const { auto result = (_fraction_exponent_sign & 4503599627370495UL) >>0U; return cast(ulong) result;}
@property void fraction(ulong v) @safe pure nothrow @nogc { assert(v >= fraction_min, "Value is smaller than the minimum value of bitfield 'fraction'"); assert(v <= fraction_max, "Value is greater than the maximum value of bitfield 'fraction'"); _fraction_exponent_sign = cast(typeof(_fraction_exponent_sign)) ((_fraction_exponent_sign & (-1-cast(typeof(_fraction_exponent_sign))4503599627370495UL)) | ((cast(typeof(_fraction_exponent_sign)) v << 0U) & 4503599627370495UL));}
enum ulong fraction_min = cast(ulong)0U;  enum ulong fraction_max = cast(ulong)4503599627370495UL; @property ushort exponent() @safe pure nothrow @nogc const { auto result = (_fraction_exponent_sign & 9218868437227405312UL) >>52U; return cast(ushort) result;}
@property void exponent(ushort v) @safe pure nothrow @nogc { assert(v >= exponent_min, "Value is smaller than the minimum value of bitfield 'exponent'"); assert(v <= exponent_max, "Value is greater than the maximum value of bitfield 'exponent'"); _fraction_exponent_sign = cast(typeof(_fraction_exponent_sign)) ((_fraction_exponent_sign & (-1-cast(typeof(_fraction_exponent_sign))9218868437227405312UL)) | ((cast(typeof(_fraction_exponent_sign)) v << 52U) & 9218868437227405312UL));}
enum ushort exponent_min = cast(ushort)0U;  enum ushort exponent_max = cast(ushort)2047U; @property bool sign() @safe pure nothrow @nogc const { return (_fraction_exponent_sign & 9223372036854775808UL) != 0;}
@property void sign(bool v) @safe pure nothrow @nogc { if (v) _fraction_exponent_sign |= 9223372036854775808UL;else _fraction_exponent_sign &= cast(typeof(_fraction_exponent_sign))(-1-cast(typeof(_fraction_exponent_sign))9223372036854775808UL);}

// expansion at C:\LDC\bin\..\import\std\format.d(1128,13)
private ubyte _flDash_flZero_flSpace_flPlus_flHash_flSeparator_;@property bool flDash() @safe pure nothrow @nogc const { return (_flDash_flZero_flSpace_flPlus_flHash_flSeparator_ & 1U) != 0;}
@property void flDash(bool v) @safe pure nothrow @nogc { if (v) _flDash_flZero_flSpace_flPlus_flHash_flSeparator_ |= 1U;else _flDash_flZero_flSpace_flPlus_flHash_flSeparator_ &= cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flSeparator_))(-1-cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flSeparator_))1U);}
@property bool flZero() @safe pure nothrow @nogc const { return (_flDash_flZero_flSpace_flPlus_flHash_flSeparator_ & 2U) != 0;}
@property void flZero(bool v) @safe pure nothrow @nogc { if (v) _flDash_flZero_flSpace_flPlus_flHash_flSeparator_ |= 2U;else _flDash_flZero_flSpace_flPlus_flHash_flSeparator_ &= cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flSeparator_))(-1-cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flSeparator_))2U);}
@property bool flSpace() @safe pure nothrow @nogc const { return (_flDash_flZero_flSpace_flPlus_flHash_flSeparator_ & 4U) != 0;}
@property void flSpace(bool v) @safe pure nothrow @nogc { if (v) _flDash_flZero_flSpace_flPlus_flHash_flSeparator_ |= 4U;else _flDash_flZero_flSpace_flPlus_flHash_flSeparator_ &= cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flSeparator_))(-1-cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flSeparator_))4U);}
@property bool flPlus() @safe pure nothrow @nogc const { return (_flDash_flZero_flSpace_flPlus_flHash_flSeparator_ & 8U) != 0;}
@property void flPlus(bool v) @safe pure nothrow @nogc { if (v) _flDash_flZero_flSpace_flPlus_flHash_flSeparator_ |= 8U;else _flDash_flZero_flSpace_flPlus_flHash_flSeparator_ &= cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flSeparator_))(-1-cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flSeparator_))8U);}
@property bool flHash() @safe pure nothrow @nogc const { return (_flDash_flZero_flSpace_flPlus_flHash_flSeparator_ & 16U) != 0;}
@property void flHash(bool v) @safe pure nothrow @nogc { if (v) _flDash_flZero_flSpace_flPlus_flHash_flSeparator_ |= 16U;else _flDash_flZero_flSpace_flPlus_flHash_flSeparator_ &= cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flSeparator_))(-1-cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flSeparator_))16U);}
@property bool flSeparator() @safe pure nothrow @nogc const { return (_flDash_flZero_flSpace_flPlus_flHash_flSeparator_ & 32U) != 0;}
@property void flSeparator(bool v) @safe pure nothrow @nogc { if (v) _flDash_flZero_flSpace_flPlus_flHash_flSeparator_ |= 32U;else _flDash_flZero_flSpace_flPlus_flHash_flSeparator_ &= cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flSeparator_))(-1-cast(typeof(_flDash_flZero_flSpace_flPlus_flHash_flSeparator_))32U);}

// expansion at C:\LDC\bin\..\import\std\functional.d(213,13)
alias a = __a ;
// expansion at C:\LDC\bin\..\import\std\functional.d(214,13)
alias b = __b ;
// expansion at C:\LDC\bin\..\import\std\functional.d(215,20)
a == b
// expansion at C:\LDC\bin\..\import\std\uni.d(6999,17)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at C:\LDC\bin\..\import\std\uni.d(7016,21)

    case '\u0000':..case '\u0008':case '\u000E':..case '\u001F':case '\u007F':..
    case '\u0084':case '\u0086':..case '\u009F': case '\u0009':..case '\u000C': case '\u0085':

// expansion at C:\LDC\bin\..\import\std\uni.d(7025,21)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        
// expansion at C:\LDC\bin\..\import\std\uni.d(7029,21)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        
// expansion at C:\LDC\bin\..\import\std\uni.d(7035,21)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        
// expansion at C:\LDC\bin\..\import\std\uni.d(7039,21)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        
// expansion at C:\LDC\bin\..\import\std\uni.d(7044,21)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        
// expansion at C:\LDC\bin\..\import\std\uni.d(7051,21)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        
// expansion at C:\LDC\bin\..\import\std\uni.d(7055,21)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        
// expansion at C:\LDC\bin\..\import\std\uni.d(7063,21)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        
// expansion at C:\LDC\bin\..\import\std\uni.d(7077,13)

            static if (getValue)
                grapheme ~= ch;
            range.popFront();
        
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at C:\LDC\bin\..\import\std\functional.d(213,13)
alias a = __a ;
// expansion at C:\LDC\bin\..\import\std\functional.d(214,13)
alias b = __b ;
// expansion at C:\LDC\bin\..\import\std\functional.d(215,20)
a == b
// expansion at C:\LDC\bin\..\import\std\functional.d(213,13)
alias a = __a ;
// expansion at C:\LDC\bin\..\import\std\functional.d(214,13)
alias b = __b ;
// expansion at C:\LDC\bin\..\import\std\functional.d(215,20)
a == b
// expansion at C:\LDC\bin\..\import\std\functional.d(213,13)
alias a = __a ;
// expansion at C:\LDC\bin\..\import\std\functional.d(214,13)
alias b = __b ;
// expansion at C:\LDC\bin\..\import\std\functional.d(215,20)
a == b
// expansion at C:\LDC\bin\..\import\std\functional.d(213,13)
alias a = __a ;
// expansion at C:\LDC\bin\..\import\std\functional.d(214,13)
alias b = __b ;
// expansion at C:\LDC\bin\..\import\std\functional.d(215,20)
a == b
// expansion at C:\LDC\bin\..\import\std\functional.d(443,16)
cast(T)a < cast(T) b
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at C:\LDC\bin\..\import\std\functional.d(213,13)
alias a = __a ;
// expansion at C:\LDC\bin\..\import\std\functional.d(214,13)
alias b = __b ;
// expansion at C:\LDC\bin\..\import\std\functional.d(215,20)
a == b
// expansion at C:\LDC\bin\..\import\std\functional.d(213,13)
alias a = __a ;
// expansion at C:\LDC\bin\..\import\std\functional.d(214,13)
alias b = __b ;
// expansion at C:\LDC\bin\..\import\std\functional.d(215,20)
a == b
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at C:\LDC\bin\..\import\std\functional.d(213,13)
alias a = __a ;
// expansion at C:\LDC\bin\..\import\std\functional.d(214,13)
alias b = __b ;
// expansion at C:\LDC\bin\..\import\std\functional.d(215,20)
a.pos < b.pos
// expansion at C:\LDC\bin\..\import\std\functional.d(443,16)
cast(T)a < cast(T) b
// expansion at C:\LDC\bin\..\import\std\functional.d(469,37)
a < b
// expansion at C:\LDC\bin\..\import\std\functional.d(472,32)
a < b
// expansion at C:\LDC\bin\..\import\std\functional.d(469,37)
a < b
// expansion at C:\LDC\bin\..\import\std\functional.d(472,32)
a < b
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at source\rasterize\rasterizer.d(647,17)
Edge* edge = m_edgepool.allocate();edge.dx = cast(long) (fpDXScale * (x1-x0) / (y1-y0));edge.x = (cast(long) x0) << 32;edge.y = y0;edge.y2 = y1;int by = y0 >> fpFracBits;int xxx = max(abs(x1-x0),1);edge.dy = cast(long) (fpDYScale * (y1-y0) /  xxx);edge.next = m_buckets[by];m_buckets[by] = edge;
// expansion at source\rasterize\rasterizer.d(660,17)
{ int i0 = y0 >> fpFracBits;int f0 = (y0 & 0xFF) << 7;int i1 = sy >> fpFracBits;int f1 = (sy & 0xFF) << 7;m_clipbfr_l[i0] += 32768-f0;m_clipbfr_l[i0+1] += f0;m_clipbfr_l[i1] += f1-32768;m_clipbfr_l[i1+1] += -f1; }
// expansion at source\rasterize\rasterizer.d(661,17)
Edge* edge = m_edgepool.allocate();edge.dx = cast(long) (fpDXScale * (x1-m_clipleft) / (y1-sy));edge.x = (cast(long) m_clipleft) << 32;edge.y = sy;edge.y2 = y1;int by = sy >> fpFracBits;int xxx = max(abs(x1-m_clipleft),1);edge.dy = cast(long) (fpDYScale * (y1-sy) /  xxx);edge.next = m_buckets[by];m_buckets[by] = edge;
// expansion at source\rasterize\rasterizer.d(665,17)
{ int i0 = y0 >> fpFracBits;int f0 = (y0 & 0xFF) << 7;int i1 = sy >> fpFracBits;int f1 = (sy & 0xFF) << 7;m_clipbfr_r[i0] += 32768-f0;m_clipbfr_r[i0+1] += f0;m_clipbfr_r[i1] += f1-32768;m_clipbfr_r[i1+1] += -f1; }
// expansion at source\rasterize\rasterizer.d(666,17)
Edge* edge = m_edgepool.allocate();edge.dx = cast(long) (fpDXScale * (x1-m_clipright) / (y1-sy));edge.x = (cast(long) m_clipright) << 32;edge.y = sy;edge.y2 = y1;int by = sy >> fpFracBits;int xxx = max(abs(x1-m_clipright),1);edge.dy = cast(long) (fpDYScale * (y1-sy) /  xxx);edge.next = m_buckets[by];m_buckets[by] = edge;
// expansion at source\rasterize\rasterizer.d(670,17)
Edge* edge = m_edgepool.allocate();edge.dx = cast(long) (fpDXScale * (m_clipleft-x0) / (sy-y0));edge.x = (cast(long) x0) << 32;edge.y = y0;edge.y2 = sy;int by = y0 >> fpFracBits;int xxx = max(abs(m_clipleft-x0),1);edge.dy = cast(long) (fpDYScale * (sy-y0) /  xxx);edge.next = m_buckets[by];m_buckets[by] = edge;
// expansion at source\rasterize\rasterizer.d(671,17)
{ int i0 = sy >> fpFracBits;int f0 = (sy & 0xFF) << 7;int i1 = y1 >> fpFracBits;int f1 = (y1 & 0xFF) << 7;m_clipbfr_l[i0] += 32768-f0;m_clipbfr_l[i0+1] += f0;m_clipbfr_l[i1] += f1-32768;m_clipbfr_l[i1+1] += -f1; }
// expansion at source\rasterize\rasterizer.d(674,17)
{ int i0 = y0 >> fpFracBits;int f0 = (y0 & 0xFF) << 7;int i1 = y1 >> fpFracBits;int f1 = (y1 & 0xFF) << 7;m_clipbfr_l[i0] += 32768-f0;m_clipbfr_l[i0+1] += f0;m_clipbfr_l[i1] += f1-32768;m_clipbfr_l[i1+1] += -f1; }
// expansion at source\rasterize\rasterizer.d(679,17)
{ int i0 = y0 >> fpFracBits;int f0 = (y0 & 0xFF) << 7;int i1 = sr >> fpFracBits;int f1 = (sr & 0xFF) << 7;m_clipbfr_r[i0] += 32768-f0;m_clipbfr_r[i0+1] += f0;m_clipbfr_r[i1] += f1-32768;m_clipbfr_r[i1+1] += -f1; }
// expansion at source\rasterize\rasterizer.d(680,17)
Edge* edge = m_edgepool.allocate();edge.dx = cast(long) (fpDXScale * (m_clipleft-m_clipright) / (sl-sr));edge.x = (cast(long) m_clipright) << 32;edge.y = sr;edge.y2 = sl;int by = sr >> fpFracBits;int xxx = max(abs(m_clipleft-m_clipright),1);edge.dy = cast(long) (fpDYScale * (sl-sr) /  xxx);edge.next = m_buckets[by];m_buckets[by] = edge;
// expansion at source\rasterize\rasterizer.d(681,17)
{ int i0 = sl >> fpFracBits;int f0 = (sl & 0xFF) << 7;int i1 = y1 >> fpFracBits;int f1 = (y1 & 0xFF) << 7;m_clipbfr_l[i0] += 32768-f0;m_clipbfr_l[i0+1] += f0;m_clipbfr_l[i1] += f1-32768;m_clipbfr_l[i1+1] += -f1; }
// expansion at source\rasterize\rasterizer.d(685,17)
Edge* edge = m_edgepool.allocate();edge.dx = cast(long) (fpDXScale * (m_clipright-x0) / (sy-y0));edge.x = (cast(long) x0) << 32;edge.y = y0;edge.y2 = sy;int by = y0 >> fpFracBits;int xxx = max(abs(m_clipright-x0),1);edge.dy = cast(long) (fpDYScale * (sy-y0) /  xxx);edge.next = m_buckets[by];m_buckets[by] = edge;
// expansion at source\rasterize\rasterizer.d(686,17)
{ int i0 = sy >> fpFracBits;int f0 = (sy & 0xFF) << 7;int i1 = y1 >> fpFracBits;int f1 = (y1 & 0xFF) << 7;m_clipbfr_r[i0] += 32768-f0;m_clipbfr_r[i0+1] += f0;m_clipbfr_r[i1] += f1-32768;m_clipbfr_r[i1+1] += -f1; }
// expansion at source\rasterize\rasterizer.d(691,17)
{ int i0 = y0 >> fpFracBits;int f0 = (y0 & 0xFF) << 7;int i1 = sl >> fpFracBits;int f1 = (sl & 0xFF) << 7;m_clipbfr_l[i0] += 32768-f0;m_clipbfr_l[i0+1] += f0;m_clipbfr_l[i1] += f1-32768;m_clipbfr_l[i1+1] += -f1; }
// expansion at source\rasterize\rasterizer.d(692,17)
Edge* edge = m_edgepool.allocate();edge.dx = cast(long) (fpDXScale * (m_clipright-m_clipleft) / (sr-sl));edge.x = (cast(long) m_clipleft) << 32;edge.y = sl;edge.y2 = sr;int by = sl >> fpFracBits;int xxx = max(abs(m_clipright-m_clipleft),1);edge.dy = cast(long) (fpDYScale * (sr-sl) /  xxx);edge.next = m_buckets[by];m_buckets[by] = edge;
// expansion at source\rasterize\rasterizer.d(693,17)
{ int i0 = sr >> fpFracBits;int f0 = (sr & 0xFF) << 7;int i1 = y1 >> fpFracBits;int f1 = (y1 & 0xFF) << 7;m_clipbfr_r[i0] += 32768-f0;m_clipbfr_r[i0+1] += f0;m_clipbfr_r[i1] += f1-32768;m_clipbfr_r[i1+1] += -f1; }
// expansion at source\rasterize\rasterizer.d(696,17)
{ int i0 = y0 >> fpFracBits;int f0 = (y0 & 0xFF) << 7;int i1 = y1 >> fpFracBits;int f1 = (y1 & 0xFF) << 7;m_clipbfr_r[i0] += 32768-f0;m_clipbfr_r[i0+1] += f0;m_clipbfr_r[i1] += f1-32768;m_clipbfr_r[i1+1] += -f1; }
// expansion at source\rasterize\rasterizer.d(743,17)
Edge* edge = m_edgepool.allocate();edge.dx = cast(long) (fpDXScale * (x1-x0) / (y1-y0));edge.x = (cast(long) x0) << 32;edge.y = y0;edge.y2 = y1;int by = y0 >> fpFracBits;int xxx = max(abs(x1-x0),1);edge.dy = cast(long) (fpDYScale * (y0-y1) /  xxx);edge.next = m_buckets[by];m_buckets[by] = edge;
// expansion at source\rasterize\rasterizer.d(756,17)
{ int i0 = y0 >> fpFracBits;int f0 = (y0 & 0xFF) << 7;int i1 = sy >> fpFracBits;int f1 = (sy & 0xFF) << 7;m_clipbfr_l[i0] -= 32768-f0;m_clipbfr_l[i0+1] -= f0;m_clipbfr_l[i1] -= f1-32768;m_clipbfr_l[i1+1] -= -f1; }
// expansion at source\rasterize\rasterizer.d(757,17)
Edge* edge = m_edgepool.allocate();edge.dx = cast(long) (fpDXScale * (x1-m_clipleft) / (y1-sy));edge.x = (cast(long) m_clipleft) << 32;edge.y = sy;edge.y2 = y1;int by = sy >> fpFracBits;int xxx = max(abs(x1-m_clipleft),1);edge.dy = cast(long) (fpDYScale * (sy-y1) /  xxx);edge.next = m_buckets[by];m_buckets[by] = edge;
// expansion at source\rasterize\rasterizer.d(761,17)
{ int i0 = y0 >> fpFracBits;int f0 = (y0 & 0xFF) << 7;int i1 = sy >> fpFracBits;int f1 = (sy & 0xFF) << 7;m_clipbfr_r[i0] -= 32768-f0;m_clipbfr_r[i0+1] -= f0;m_clipbfr_r[i1] -= f1-32768;m_clipbfr_r[i1+1] -= -f1; }
// expansion at source\rasterize\rasterizer.d(762,17)
Edge* edge = m_edgepool.allocate();edge.dx = cast(long) (fpDXScale * (x1-m_clipright) / (y1-sy));edge.x = (cast(long) m_clipright) << 32;edge.y = sy;edge.y2 = y1;int by = sy >> fpFracBits;int xxx = max(abs(x1-m_clipright),1);edge.dy = cast(long) (fpDYScale * (sy-y1) /  xxx);edge.next = m_buckets[by];m_buckets[by] = edge;
// expansion at source\rasterize\rasterizer.d(766,17)
Edge* edge = m_edgepool.allocate();edge.dx = cast(long) (fpDXScale * (m_clipleft-x0) / (sy-y0));edge.x = (cast(long) x0) << 32;edge.y = y0;edge.y2 = sy;int by = y0 >> fpFracBits;int xxx = max(abs(m_clipleft-x0),1);edge.dy = cast(long) (fpDYScale * (y0-sy) /  xxx);edge.next = m_buckets[by];m_buckets[by] = edge;
// expansion at source\rasterize\rasterizer.d(767,17)
{ int i0 = sy >> fpFracBits;int f0 = (sy & 0xFF) << 7;int i1 = y1 >> fpFracBits;int f1 = (y1 & 0xFF) << 7;m_clipbfr_l[i0] -= 32768-f0;m_clipbfr_l[i0+1] -= f0;m_clipbfr_l[i1] -= f1-32768;m_clipbfr_l[i1+1] -= -f1; }
// expansion at source\rasterize\rasterizer.d(770,17)
{ int i0 = y0 >> fpFracBits;int f0 = (y0 & 0xFF) << 7;int i1 = y1 >> fpFracBits;int f1 = (y1 & 0xFF) << 7;m_clipbfr_l[i0] -= 32768-f0;m_clipbfr_l[i0+1] -= f0;m_clipbfr_l[i1] -= f1-32768;m_clipbfr_l[i1+1] -= -f1; }
// expansion at source\rasterize\rasterizer.d(775,17)
{ int i0 = y0 >> fpFracBits;int f0 = (y0 & 0xFF) << 7;int i1 = sr >> fpFracBits;int f1 = (sr & 0xFF) << 7;m_clipbfr_r[i0] -= 32768-f0;m_clipbfr_r[i0+1] -= f0;m_clipbfr_r[i1] -= f1-32768;m_clipbfr_r[i1+1] -= -f1; }
// expansion at source\rasterize\rasterizer.d(776,17)
Edge* edge = m_edgepool.allocate();edge.dx = cast(long) (fpDXScale * (m_clipleft-m_clipright) / (sl-sr));edge.x = (cast(long) m_clipright) << 32;edge.y = sr;edge.y2 = sl;int by = sr >> fpFracBits;int xxx = max(abs(m_clipleft-m_clipright),1);edge.dy = cast(long) (fpDYScale * (sr-sl) /  xxx);edge.next = m_buckets[by];m_buckets[by] = edge;
// expansion at source\rasterize\rasterizer.d(777,17)
{ int i0 = sl >> fpFracBits;int f0 = (sl & 0xFF) << 7;int i1 = y1 >> fpFracBits;int f1 = (y1 & 0xFF) << 7;m_clipbfr_l[i0] -= 32768-f0;m_clipbfr_l[i0+1] -= f0;m_clipbfr_l[i1] -= f1-32768;m_clipbfr_l[i1+1] -= -f1; }
// expansion at source\rasterize\rasterizer.d(781,17)
Edge* edge = m_edgepool.allocate();edge.dx = cast(long) (fpDXScale * (m_clipright-x0) / (sy-y0));edge.x = (cast(long) x0) << 32;edge.y = y0;edge.y2 = sy;int by = y0 >> fpFracBits;int xxx = max(abs(m_clipright-x0),1);edge.dy = cast(long) (fpDYScale * (y0-sy) /  xxx);edge.next = m_buckets[by];m_buckets[by] = edge;
// expansion at source\rasterize\rasterizer.d(782,17)
{ int i0 = sy >> fpFracBits;int f0 = (sy & 0xFF) << 7;int i1 = y1 >> fpFracBits;int f1 = (y1 & 0xFF) << 7;m_clipbfr_r[i0] -= 32768-f0;m_clipbfr_r[i0+1] -= f0;m_clipbfr_r[i1] -= f1-32768;m_clipbfr_r[i1+1] -= -f1; }
// expansion at source\rasterize\rasterizer.d(787,17)
{ int i0 = y0 >> fpFracBits;int f0 = (y0 & 0xFF) << 7;int i1 = sl >> fpFracBits;int f1 = (sl & 0xFF) << 7;m_clipbfr_l[i0] -= 32768-f0;m_clipbfr_l[i0+1] -= f0;m_clipbfr_l[i1] -= f1-32768;m_clipbfr_l[i1+1] -= -f1; }
// expansion at source\rasterize\rasterizer.d(788,17)
Edge* edge = m_edgepool.allocate();edge.dx = cast(long) (fpDXScale * (m_clipright-m_clipleft) / (sr-sl));edge.x = (cast(long) m_clipleft) << 32;edge.y = sl;edge.y2 = sr;int by = sl >> fpFracBits;int xxx = max(abs(m_clipright-m_clipleft),1);edge.dy = cast(long) (fpDYScale * (sl-sr) /  xxx);edge.next = m_buckets[by];m_buckets[by] = edge;
// expansion at source\rasterize\rasterizer.d(789,17)
{ int i0 = sr >> fpFracBits;int f0 = (sr & 0xFF) << 7;int i1 = y1 >> fpFracBits;int f1 = (y1 & 0xFF) << 7;m_clipbfr_r[i0] -= 32768-f0;m_clipbfr_r[i0+1] -= f0;m_clipbfr_r[i1] -= f1-32768;m_clipbfr_r[i1+1] -= -f1; }
// expansion at source\rasterize\rasterizer.d(792,17)
{ int i0 = y0 >> fpFracBits;int f0 = (y0 & 0xFF) << 7;int i1 = y1 >> fpFracBits;int f1 = (y1 & 0xFF) << 7;m_clipbfr_r[i0] -= 32768-f0;m_clipbfr_r[i0+1] -= f0;m_clipbfr_r[i1] -= f1-32768;m_clipbfr_r[i1+1] -= -f1; }
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at source\rasterize\truetype.d(108,30)
{ asm { int 3; }}
// expansion at source\rasterize\truetype.d(114,42)
{ asm { int 3; }}
// expansion at source\rasterize\truetype.d(138,48)
{ asm { int 3; }}
// expansion at source\rasterize\truetype.d(139,48)
{ asm { int 3; }}
// expansion at source\rasterize\truetype.d(140,48)
{ asm { int 3; }}
// expansion at source\rasterize\truetype.d(141,48)
{ asm { int 3; }}
// expansion at source\rasterize\truetype.d(142,48)
{ asm { int 3; }}
// expansion at source\rasterize\truetype.d(148,42)
{ asm { int 3; }}
// expansion at source\rasterize\truetype.d(149,26)
{ asm { int 3; }}
// expansion at source\rasterize\truetype.d(154,32)
{ asm { int 3; }}
// expansion at source\rasterize\truetype.d(159,32)
{ asm { int 3; }}
// expansion at source\rasterize\truetype.d(166,31)
{ asm { int 3; }}
// expansion at source\rasterize\truetype.d(172,42)
{ asm { int 3; }}
// expansion at source\rasterize\truetype.d(175,35)
{ asm { int 3; }}
// expansion at source\rasterize\truetype.d(187,40)
{ asm { int 3; }}
// expansion at source\rasterize\truetype.d(189,42)
{ asm { int 3; }}
// expansion at source\rasterize\truetype.d(194,31)
{ asm { int 3; }}
// expansion at source\rasterize\truetype.d(215,45)
{ asm { int 3; }}
// expansion at source\rasterize\truetype.d(340,27)
{ asm { int 3; }}
// expansion at source\rasterize\truetype.d(345,44)
{ asm { int 3; }}
// expansion at source\rasterize\truetype.d(348,49)
{ asm { int 3; }}
// expansion at source\rasterize\truetype.d(359,45)
{ asm { int 3; }}
// expansion at source\rasterize\truetype.d(371,45)
{ asm { int 3; }}
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at source\rasterize\truetype.d(440,36)
{ asm { int 3; }}
// expansion at source\rasterize\truetype.d(441,38)
{ asm { int 3; }}
// expansion at source\rasterize\truetype.d(560,43)
{ asm { int 3; }}
// expansion at source\rasterize\truetype.d(564,47)
{ asm { int 3; }}
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at C:\LDC\bin\..\import\std\functional.d(213,13)
alias a = __a ;
// expansion at C:\LDC\bin\..\import\std\functional.d(214,13)
alias b = __b ;
// expansion at C:\LDC\bin\..\import\std\functional.d(215,20)
a <= b
// expansion at C:\LDC\bin\..\import\std\functional.d(213,13)
alias a = __a ;
// expansion at C:\LDC\bin\..\import\std\functional.d(214,13)
alias b = __b ;
// expansion at C:\LDC\bin\..\import\std\functional.d(215,20)
a == b
// expansion at C:\LDC\bin\..\import\std\uni.d(1656,5)

    import core.bitop : bsr;
    auto power = bsr(m)+1;
    switch (power){
        case 10:
            if (pred(range[idx+512], needle))
                idx +=  512;
            goto case;
        
        case 9:
            if (pred(range[idx+256], needle))
                idx +=  256;
            goto case;
        
        case 8:
            if (pred(range[idx+128], needle))
                idx +=  128;
            goto case;
        
        case 7:
            if (pred(range[idx+64], needle))
                idx +=  64;
            goto case;
        
        case 6:
            if (pred(range[idx+32], needle))
                idx +=  32;
            goto case;
        
        case 5:
            if (pred(range[idx+16], needle))
                idx +=  16;
            goto case;
        
        case 4:
            if (pred(range[idx+8], needle))
                idx +=  8;
            goto case;
        
        case 3:
            if (pred(range[idx+4], needle))
                idx +=  4;
            goto case;
        
        case 2:
            if (pred(range[idx+2], needle))
                idx +=  2;
            goto case;
        
        case 1:
            if (pred(range[idx+1], needle))
                idx +=  1;
            goto case;
        
        case 0:
            if (pred(range[idx], needle))
                idx += 1;
            goto default;
        
        default:
    }
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at C:\LDC\bin\..\import\std\functional.d(213,13)
alias a = __a ;
// expansion at C:\LDC\bin\..\import\std\functional.d(214,13)
alias b = __b ;
// expansion at C:\LDC\bin\..\import\std\functional.d(215,20)
a < b
// expansion at C:\LDC\bin\..\import\std\functional.d(213,13)
alias a = __a ;
// expansion at C:\LDC\bin\..\import\std\functional.d(214,13)
alias b = __b ;
// expansion at C:\LDC\bin\..\import\std\functional.d(215,20)
a < b
// expansion at C:\LDC\bin\..\import\std\functional.d(213,13)
alias a = __a ;
// expansion at C:\LDC\bin\..\import\std\functional.d(214,13)
alias b = __b ;
// expansion at C:\LDC\bin\..\import\std\functional.d(215,20)
a < b
// expansion at C:\LDC\bin\..\import\std\functional.d(213,13)
alias a = __a ;
// expansion at C:\LDC\bin\..\import\std\functional.d(214,13)
alias b = __b ;
// expansion at C:\LDC\bin\..\import\std\functional.d(215,20)
a < b
// expansion at C:\LDC\bin\..\import\std\functional.d(469,37)
a < b
// expansion at C:\LDC\bin\..\import\std\functional.d(472,32)
a < b
// expansion at C:\LDC\bin\..\import\std\functional.d(120,13)
alias a = __a ;
// expansion at C:\LDC\bin\..\import\std\functional.d(121,20)
a[0] > 0x80
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at C:\LDC\bin\..\import\std\functional.d(469,37)
a < b
// expansion at C:\LDC\bin\..\import\std\functional.d(472,32)
a < b
// expansion at C:\LDC\bin\..\import\std\functional.d(213,13)
alias a = __a ;
// expansion at C:\LDC\bin\..\import\std\functional.d(214,13)
alias b = __b ;
// expansion at C:\LDC\bin\..\import\std\functional.d(215,20)
a <= b
// expansion at C:\LDC\bin\..\import\std\functional.d(213,13)
alias a = __a ;
// expansion at C:\LDC\bin\..\import\std\functional.d(214,13)
alias b = __b ;
// expansion at C:\LDC\bin\..\import\std\functional.d(215,20)
a <= b
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
// expansion at 
size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;
